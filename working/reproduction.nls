
;; The MIT License (MIT)
;;
;; Copyright (c) 2020 David O'Sullivan
;;
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to  permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included
;; in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
;; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

to-report get-next-generation [r local-pops]
  if r = 0 [
    report (list 0 0 0)
  ]
  ;; Going to assume THREE populations
  ;; only wild and GM reproduce
  let reproductive sum but-last local-pops
  ;; from which we get the new-population
  let new-pop random-poisson (r * reproductive)
  ;; the proportions of these in each of wild, GM and sterile
  ;; determined by w^2, 2gw, g^2
  let pop-rel binom-series but-last local-pops
  report repeat-binomial-draws new-pop pop-rel
end

to-report binom-series [x]
  let x0 item 0 x
  let x1 item 1 x
  report (list (x0 * x0) (2 * x0 * x1) (x1 * x1))
end

;to-report get-n-binom-p [n p]
;  let result [0 0]
;  repeat n [
;    ifelse random-float 1 < p
;    [ set result replace-item 0 result (item 0 result + 1) ]
;    [ set result replace-item 1 result (item 1 result + 1) ]
;  ]
;  report result
;end


; This binomial algorithm from
; Devroye. L. 1960. Generating the maximum of independent identically
; distributed random variables. Computers and Mathematics with
; Applications 6, 305-315.
; should be a bit quicker because it only needs ~ np random-float calls
; Based on code from https://stackoverflow.com/questions/23561551/a-efficient-binomial-random-number-generator-code-in-java#23574723
to-report get-binomial-2 [n p]
  ; need to trap p = 0 and p = 1
  if p = 1 [ report n ]
  if p = 0 [ report 0 ]
  let ln-q ln (1 - p)
  let x 0
  let s 0
  ; also need to avoid x = n
  while [x < n] [
    set s s + ln (random-float 1) / (n - x)
    if s < ln-q [
      report x
    ]
    set x x + 1
  ]
  report x
end


to-report repeat-binomial-draws [n rel-nums]
  let result []
  let len length rel-nums
  while [sum result < n] [
    let px first rel-nums / sum rel-nums
    set result sentence result get-binomial-2 (n - sum result) px
    set rel-nums but-first rel-nums
  ]
  ifelse length result < len
  [ report pack-zeros result ]
  [ report result ]
end


to-report get-binomial [n p]
  report sum n-values n [i -> ifelse-value (random-float 1 < p) [1] [0]]
end



to-report pack-zeros [lst]
  report sublist (sentence lst n-values num-pops [x -> 0]) 0 num-pops
end


to-report patch-at-offset [xy]
  report patch-at item 0 xy item 1 xy
end
