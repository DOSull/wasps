
;; The MIT License (MIT)
;;
;; Copyright (c) 2020 David O'Sullivan
;;
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to  permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included
;; in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
;; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

to setup
  clear-all
  reset-ticks

  if use-seed? [
    random-seed seed
  ]
  set debug? false

  ;; number of subpopulation is 3 in the wasp model
  set num-subpops 3
  ;; the corresponding brewer palettes (item 3 for total population)
  set pals ["OrRd" "PuBu" "BuGn" "BuPu"]

  ;; setup capacities and roads
  ;; in the full model these are read from ASCII raster data
  setup-capacities
  setup-roads

  ;; setup frequently used subsets of the patches
  set the-land patches with [capacity >= 0]
  set the-habitable-land the-land with [capacity > 0]
  set the-sea patches with [capacity < 0]

  ;; initialise the patch population lists
  initialise-pops-to-zero

  ;; now the various possible initialisations
  if homogeneous? [ 
    ; This works by making all the patch capacities the same
    let mean-k mean [capacity] of the-habitable-land
    ask the-habitable-land [
      set capacity mean-k
    ]
    ;; could also set the sd-init-occ to zero
    ;; buit that's probably one for the model user
    ; set stdev-occupancy 0.0
  ]
  if member? "base" scenario [
    ; this will initialize to N(mean-occupancy, stdev-occupancy) * capacity in all
    ; the habitable patches. A proportion proportion-gm will be GM wasps
    setup-patch-populations
  ]
  if member? "release sites" scenario [
    ; this will lead to addition of wasps at a randomly selected range of locations
    ; number-of-sites selected at random from the percentile-selector best locations
    ; (defined by capacity). wasps-per-site will be added
    release-wasps true
  ]
  
  setup-monitoring-area

  update-populations
  ask the-habitable-land [
    sprout-vizs 1 [
      set shape "circle"
    ]
  ]
  colour-patches
  ask the-sea [set pcolor cyan + 2]

  renew-plots
  if debug? [ reset-timer ]
end


to setup-capacities
;; For the realistic GIS space:  
  let ds gis:load-dataset "wasp-suitability.asc"
  gis:apply-raster ds capacity  

  ;; scale it so the maximum capacity is the max requested
  let max-k max [capacity] of patches
  let multiple max-capacity-per-sq-km / max-k
  if debug? [ show multiple ]
  ask patches [
    ifelse (capacity >= 0)
    [ set capacity ceiling (capacity * multiple) ]
    [ set capacity -1 ]
  ]
end


to setup-roads
;; Roads
  let ds gis:load-dataset "roads-oblique.asc"
  gis:apply-raster ds road?
  ask patches [
    set road? (road? = 0)
  ]
  set the-roads patches with [road?]
  ask the-roads [
    sprout-roads 1 [
      set color grey - 2
      set shape "square"
      set size 0.85
    ]
  ]
end


to setup-patch-populations
  let initial-rel-pops (list (1 - proportion-gm) 1 0)
  ask the-habitable-land [
    set next-pops multinomial-int int (capacity * random-normal mean-occupancy stdev-occupancy) initial-rel-pops false
    set init-pops next-pops
    set init-pop sum next-pops
  ]
end

;; PATCH function
to increment-population [subpop n]
  set next-pops replace-item subpop next-pops (item subpop next-pops + n)
end


;; releast GM wasps per the UI settings 
;; initialise? is true if this is during setup
;;                false if while model is running
to release-wasps [initialise?]
  let release-sites ifelse-value grid-releases? 
  [ potential-release-sites ] 
  [ n-of number-of-sites potential-release-sites ]
  ask release-sites [
    increment-population release-type colonies-per-site
    if initialise? [
      set init-pops next-pops
      set init-pop sum init-pops
    ]
  ]
end


;; get release sites from the specified upper percentil of capacities
to-report potential-release-sites 
  ifelse percentile-selector = 0 [
    report ifelse-value grid-releases? [get-grid-corners] [the-habitable-land]
  ]
  [
    let n-percentile count the-habitable-land * (1 - percentile-selector)
    let cutoff-capacity [capacity] of item n-percentile (reverse sort-on [capacity] the-habitable-land)
    report ifelse-value grid-releases? 
    [ get-grid-corners with [capacity >= cutoff-capacity] ]
    [ the-habitable-land with [capacity >= cutoff-capacity] ]
  ]
end

to-report get-grid-corners
  report the-habitable-land with [pxcor mod grid-resolution = 0 and pycor mod grid-resolution = 0]
;  let corners patch-set nobody
;  let east max [pxcor] of the-habitable-land
;  let west min [pxcor] of the-habitable-land
;  let xs n-values ceiling ((east - west + 1) / grid-resolution) [i -> west + i * grid-resolution]
;  let north max [pycor] of the-habitable-land
;  let south min [pycor] of the-habitable-land
;  let ys n-values ceiling ((north - south + 1) / grid-resolution) [i -> south + i * grid-resolution]
;  foreach xs [ x ->
;    foreach ys [ y ->
;      if [capacity] of (patch x y) > 0 [
;        set corners (patch-set corners patch x y)
;      ]
;    ]
;  ]
;  report corners
end



to initialise-pops-to-zero
  ask the-land [
    set pops n-values num-subpops [ i -> 0 ]
    set next-pops n-values num-subpops [ i -> 0 ]
  ]
end



to setup-monitoring-area
  set monitoring-area patch-set nobody
  if monitor-area? [
    set monitoring-area the-land with [pxcor < 100 and pycor > 150 ]
    set monitoring-area patches with [pxcor > 35 and pxcor < 61 and pycor > 170 and pycor < 196]
  ]
  ask monitoring-area [
    set history []
  ]
end


;to make-movie [n]
;  vid:start-recorder
;  setup
;  vid:record-interface
;  repeat n [
;    go
;    vid:record-interface
;  ]
;  vid:save-recording "foo.mp4"
;end
