to setup
  ca
  reset-ticks
  set num-pops 3
  set pals ["Reds" "Blues" "Greens" "BuGn" "GnBu" "Oranges" "PuBu" "PuBuGn"]
  set lambda-1 (eff-lambda - (p-ldd * lambda-2)) / (1 - p-ldd)
  set p-exit get-p-exit
  
  let ds gis:load-dataset "wasp-suitability.asc"
  gis:apply-raster ds capacity
  ask patches [
    ifelse (capacity >= 0)
    [ set capacity capacity * 100 ]
    [ set capacity -1 ]
  ]
  set capacities sort remove-duplicates [capacity] of patches

  set the-land patches with [capacity >= 0]
  set the-sea patches with [capacity < 0]

  setup-patch-populations
  update-populations
  ask the-land with [capacity > 0][
    sprout-vizs 1 [
      set shape "circle"
    ]
  ]
  color-patches
  ask the-sea [set pcolor sky + 2]
  tick
  reset-timer
end



to-report get-p-exit
  let ml 1 / eff-lambda
  let int-H 1 / exp(H * ml) * (ml * ml * H * (H - 4) + 2 * ml * (H - 2) + 2)
  let int-0 2 - (4 * ml)
  report (int-H - int-0) / ml / ml / pi
end



to setup-patch-capacities
  ifelse levels = 1 [
    set capacities (list max-capacity)
  ]
  [
    let interval max-capacity / (levels - 1)
    set capacities n-values levels [q -> q * interval]
  ]
  ask patches [
  set capacity one-of capacities
  ]
  repeat setup-iter [
    ask patches [
      set capacity [capacity] of one-of neighbors4
    ]
  ]
end


to setup-patch-populations
  ask patches [
    set the-pops n-values num-pops [i -> 0]
    set next-pops n-values num-pops [i -> 0]
  ]
  ask patches [
    repeat int (capacity / 2) [ 
      let species ifelse-value (random-float 1 < init-prop-gm) [1] [0]
      set next-pops increment-item-i species 1 next-pops
    ]
  ]
end
  

to make-movie [n]
  vid:start-recorder
  setup
  vid:record-interface
  repeat n [
    go
    vid:record-interface
  ]
  vid:save-recording "foo.mp4"
end


to-report increment-item-i [i n lst]
  let x item i lst
  report replace-item i lst (x + n)
end