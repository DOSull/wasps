;; The MIT License (MIT)
;;
;; Copyright (c) 2020 David O'Sullivan
;;
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to  permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included
;; in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
;; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

to go
  if total-pop > 0 [
    ;; model-wide mean R this year
    set R-annual random-normal R-mean R-sd
    ;; habitable patches might have population
    ask the-habitable-land [
      if pop > 0 [
        ;; get the next generation and disperse it
        disperse next-generation
      ]
    ]
    ;; if any regular wasp releases are requested do that now
    if periodicity > 0 [
      if ticks mod periodicity = 0 [
        release-wasps false
      ]
    ]
  ]
  ;; update the numbers and the display and plots
  update-populations
  colour-patches
  renew-plots
  tick
  if debug? and ticks mod 10 = 0 [ show (word ticks ": " timer) ]
end

;; this is basic housekeeping on the various totals
to update-populations
  ask the-habitable-land [
    set pops next-pops
    set pop sum pops
    set next-pops n-values num-subpops [ i -> 0 ]
  ]
;  ifelse any? the-habitable-land with [pop > 0] [
    set total-pop sum [pop] of the-habitable-land
    set total-extent count the-habitable-land with [pop > 0]
    set prop-occupied total-extent / count the-land
    set mean-occupancy-rate mean [pop / capacity] of the-habitable-land
;  ]
;  [
;    set total-pop 0
;    set total-extent 0
;    set prop-occupied 0
;    set mean-occupancy-rate 0
;    set total-extent 0
;  ]
  ask monitoring-area [
    set history lput pops history
  ]
end



to-report increment-list-item [lst i x]
  let y item i lst
  report replace-item i lst (x + y)
end

to reset-map
  reset-ticks
  clear-all-plots
  ask patches [
    set pops init-pops
    set pop init-pop
  ]
  set total-pop sum [pop] of patches
  colour-patches
  renew-plots
end

to save-monitor
  let fname (word "monitor-dmean" d-mean "-pldd" p-ldd "-rmean" R-mean ".txt")
  if file-exists? fname [
    file-delete fname
  ]
  file-open fname
  file-print "x y t k p1 p2 p3"
  foreach n-values ticks [i -> i] [ t ->
    ask monitoring-area [
      file-type word pxcor " "
      file-type word pycor " "
      file-type word t " "
      file-type word capacity " "
      let p item t history
      file-type word item 0 p " "
      file-type word item 1 p " "
      file-print item 2 p
    ]
  ]
  file-close
end

to record-video [n]
  setup
  (vid:start-recorder 102 102)
  repeat n [
    vid:record-view 
    go
  ]
  vid:save-recording "sample-run.mp4"
  vid:reset-recorder
end
