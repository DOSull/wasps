;; The MIT License (MIT)
;;
;; Copyright (c) 2020 David O'Sullivan
;;
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to  permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included
;; in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
;; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

to profile-steps [n]
  setup                  ;; set up the model
  profiler:start         ;; start profiling
  repeat n [ go ]        ;; run something you want to measure
  profiler:stop          ;; stop profiling
  print profiler:report  ;; view the results
  profiler:reset         ;; clear the data
end


to profile-get-binomial [n]
  profiler:start
  let bin n-values n [i -> binomial 100 0.1]
  profiler:stop
  print profiler:report
  profiler:reset
end


;to profile-multinomial [n]
;  profiler:start
;  let pb n-values n [multinomial 100 n-values 3 [i -> random 10 + 1] true]
;  profiler:stop
;  print profiler:report
;  profiler:reset
;end
;

to profile-one-of-roads [n]
  profiler:start
  repeat n [ one-of-roads ]
  profiler:stop
  print profiler:report
  profiler:reset
end

to one-of-roads
  let x one-of roads
end

to profile-setup
  profiler:start
  setup
  profiler:stop
  print profiler:report
end


to profile-conditional-probs [n]
  profiler:start
  let x n-values 1000 [i -> random-poisson 10]
  repeat n [
    let a get-conditional-binom-probs x
    let c conditional-probabilities x 
  ]
  profiler:stop
  print profiler:report
  profiler:reset
end


to profile-multinomial [n]
  profiler:start
  let x n-values 1000 [i -> random-poisson 10]
  repeat n [
    let a multinomial-float 100 x true
    let c multinomial-int 100 x true 
  ]
  profiler:stop
  print profiler:report
  profiler:reset
end


to compare-dispersal [n]
  set use-kernel-method? true
  setup

  profiler:start
  repeat n [ go ]
  profiler:stop
  print profiler:report
  profiler:reset

  reset-map
  set use-kernel-method? false
  profiler:start
  repeat n [ go ]
  profiler:stop
  print profiler:report
  profiler:reset
end