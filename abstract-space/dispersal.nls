;; The MIT License (MIT)
;;
;; Copyright (c) 2020 David O'Sullivan
;;
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to  permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included
;; in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
;; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.


;; PATCH function
;; distributes the next generation to new locations
;; (which might be this patch in many cases!)
to disperse [next-gen]
  ;; next generation is a set of 3 numbers [wild GM sterile]
  ;; which we iterate over incrementing the index position each time
  (foreach next-gen (n-values num-subpops [i -> i]) [ [new-cases idx] ->
    ;; previously this was an ifelse clause
    ;; IMPORTANT: that causes incorrect erasure of previously dispersed
    ;; new-cases from patches processed earlier in the loop
    if new-cases > 0 [
      ;; determine any long-distance dispersals and apply them
      let n-ldds binomial new-cases p-ldd
      repeat n-ldds [
        ifelse member? "targetted-" LDD 
        [ disperse-to one-of preferred-sites 1 idx ]
        [ disperse-to one-of (other patches) 1 idx ]
      ]
      disperse-using-heading-and-distance (new-cases - n-ldds) idx
    ]
  ])
end


;; PATCH function
;; convenience reporter for patch-at from a coordinate pair list
to-report my-patch-at [xy]
  report patch-at item 0 xy item 1 xy
end


;; PATCH function
;; simple dispersal by selection of random heading and distance
to disperse-using-heading-and-distance [n idx]
  repeat n [
    let target nobody
    while [target = nobody] [
      set target patch-at-heading-and-distance (random-float 360) (random-exponential d-mean)
    ]
    disperse-to target 1 idx
  ]
end


;; PATCH function
;; disperse to the specified target patch
;; the specified number of cases of the
;; specified type 0 = wild 1 = GM 2 = sterile
to disperse-to [tgt num idx-type]
  ask tgt [
    if capacity > 0 [
      increment-population idx-type num
    ]
  ]
end


