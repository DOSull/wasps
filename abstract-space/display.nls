;; The MIT License (MIT)
;;
;; Copyright (c) 2020 David O'Sullivan
;;
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to  permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included
;; in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
;; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

to color-patches
  ;; something in the view updating is throwing the RNG off
  ;; no idea what, but use with-local-randomness to avoid
  with-local-randomness [
    ifelse show-pop? [
      ask vizs [set hidden? true]
      let pal item show-pop pals
      let pop-patches the-land ;; with [pop > 0]
      ifelse any? pop-patches [
        ifelse show-pop = num-pops [
          let mx-pop max [capacity] of patches
          let mn-pop min [capacity] of patches
          ask pop-patches [
            set pcolor palette:scale-scheme "Sequential" pal 9 pop mn-pop mx-pop
          ]
        ]
        [
          let pops-to-show [item show-pop pops] of pop-patches
          let mx-pop max pops-to-show
          let mn-pop min pops-to-show
          ask pop-patches [
            set pcolor palette:scale-scheme "Sequential" pal 9 (item show-pop pops) mn-pop mx-pop
          ]
        ]
      ]
      [
        ask the-land [
          set pcolor grey + 2
        ]
      ]
    ]
    [
      let mx-q max [capacity] of patches
      let mn-q min [capacity] of patches
      ask the-land [
        set pcolor palette:scale-gradient [[255 255 255] [153 153 153]] capacity mx-q mn-q
      ]
      ask vizs [
        ;set pcolor white
        set hidden? false
        ifelse pop > 0 [
          let r-p first pops / pop
          let b-p item 1 pops / pop
          set color (list (255 * r-p) 0 (255 * b-p) 153)
        ]
        [ set hidden? true ]
      ]
    ]
  ]
end


to renew-plots
  set-current-plot "Populations"
  set-current-plot-pen "total"
  plot total-pop
  set-current-plot-pen "wild"
  plot sum [item 0 pops] of the-land
  set-current-plot-pen "GM"
  plot sum [item 1 pops] of the-land
  set-current-plot-pen "dying"
  plot sum [item 2 pops] of the-land

;  set-current-plot "Dispersal distances"
;  clear-plot
;  (foreach (n-values 350 [x -> x]) (array:to-list distances) [
;    [x y] ->
;      plotxy x ln (y + 1)
;  ])
end
