
;; The MIT License (MIT)
;;
;; Copyright (c) 2020 David O'Sullivan
;;
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to  permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included
;; in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
;; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

to-report next-generation
  ;; Assume THREE populations
  ;; only wild and GM reproduce
  let reproductive sum but-last pops
  ;; from which we get the new-population
  ;; determine local R
  ;; we allow for both 'standard' discrete logistic pop model and logistic map
  ifelse use-logistic-map? 
  [ ;; logistic map means no survivors and we use raw R + 1
    ;; because there is no persistence of population in this model
    set R-local (1 + R-annual) * (1 - pop / capacity) 
  ]
  [ ;; standard logistic, we apply mortality and boost R to get desired net R
    set R-local (1 - mortality) + (R-annual + mortality) * (1 - pop / capacity) 
  ]
  
  let new-pop (R-local * reproductive)
  if new-pop < 1 [
    report [0 0 0]
  ]
  if stochastic-repro? [ 
    ifelse var-mean-ratio = 1 
    [ set new-pop random-poisson new-pop ]
    [ set new-pop nbinomial-with-mean-vmr new-pop var-mean-ratio ]
  ]
  
  ;; where lambda is effectively old-lambda - 1
  ;; (and perhaps should be redesignated r)
  ;;
  ;; let new-pop random-poisson (lambda * reproductive)
  
  ;; let new-pop reproductive + random-poisson (lambda * reproductive)
  ;; the proportions of these in each of wild, GM and sterile
  ;; determined by w^2, 2gw, g^2
  let pop-rel binom-expansion but-last pops
  report multinomial-int new-pop pop-rel true
end

;; report binomial coefficients [x_0^2 2x-0x_1 x_1^2]
;; from an input list [x0 x1]
to-report binom-expansion [x]
  let x0 item 0 x
  let x1 item 1 x
  report (list (x0 * x0) (2 * x0 * x1) (x1 * x1))
end


; This binomial algorithm from
; Devroye. L. 1960. Generating the maximum of independent identically
; distributed random variables. Computers and Mathematics with
; Applications 6, 305-315.
; should be a bit quicker because it only needs ~ np random-float calls
; Based on code from 
; https://stackoverflow.com/questions/23561551/a-efficient-binomial-random-number-generator-code-in-java#23574723
to-report binomial [n p]
  ; need to trap p = 0 and p = 1
  if p = 1 [ report n ]
  if p = 0 [ report 0 ]
  let ln-q ln (1 - p)
  let x 0
  let s 0
  ; also need to avoid x = n
  while [x < n] [
    set s s + ln (random-float 1) / (n - x)
    if s < ln-q [
      report x
    ]
    set x x + 1
  ]
  report x
end

;; wrapper to get a negative binomial variate with mean m and variance mean ratio vmr
;; the standard nbin parameters are r and p
to-report nbinomial-with-mean-vmr [m vmr]
  let r m / (vmr - 1)
  let p 1 - 1 / vmr 
;  if debug? [ show (word "m: " m "v " (vmr * m) " r: " r " p: " p) ]
  report random-nbinomial r p
end

;; negative binomial implemented as a Poisson draw paramterised with a Gamma distributed
;; variate per https://en.wikipedia.org/wiki/Negative_binomial_distribution#Gamma%E2%80%93Poisson_mixture
to-report random-nbinomial [r p]
  report random-poisson random-gamma r ((1 - p) / p)
end



;; perform repeated binomial draws from population n
;; without replacement, with p based on ratios determined 
;; from the list of frequencies supplied - these can be floats 
;; rescale allows pre-calculation of the relative frequencies
;; if true the provided frequencies need to be calculated as we go
;; if false the provided frequencies can be used as-is
;; this is potentially useful for the spatial kernel where the frequencies 
;; remain fixed (not currently used...)
to-report multinomial-float [n frequencies rescale?]
  let conditional-freqs []
  ifelse rescale? 
  [ set conditional-freqs conditional-probabilities frequencies ]
  [ set conditional-freqs frequencies ]
  ;; empty list for the results
  let result []
  ;; remember how many values we will need
  let num-values length conditional-freqs
  ;; keep going as long as we haven't drawn all n
  while [sum result < n] [
    ;; the next draw is based on the proportion of 
    ;; the remaining total represented by the first number
    ;; first time around this will be n0 / total
    ;; then it will be n1 / (total - n0), and so on
    let px first conditional-freqs
    ;; meanwhile the number remaining to be drawn is n - sum result, so...
    ifelse px > 0
    [ set result sentence result binomial (n - sum result) px ]
    [ set result sentence result 0 ]
    set conditional-freqs but-first conditional-freqs
  ]
  ;; if the result is not the required length then pack it with zeros
  ifelse length result < num-values
  [ report pack-zeros result num-values true]
  [ report result ]
end

;; this works ONLY with integer frequencies
;; because that way we are guaranteed to get 
;; a final probability of 1 (because floating-point 
;; arithmetic with small numbers is a bit unreliable)
to-report multinomial-int [n frequencies rescale?]
  let conditional-freqs []
  ifelse rescale? 
  [ set conditional-freqs conditional-probabilities frequencies ]
  [ set conditional-freqs frequencies ]
  report reduce [ [a b] -> lput (ifelse-value (b > 0) [binomial (n - sum a) b] [0]) a] fput [] conditional-freqs
end


;; reports the conditional probabilities required
;; for the multinomial generator
to-report get-conditional-binom-probs [frequencies]
  let length-reqd length frequencies
  let rescaled []
  let f 0
  while [sum frequencies > 0] [
    set f first frequencies
    set rescaled lput (f / sum frequencies) rescaled
    set frequencies but-first frequencies
  ]
  ifelse length rescaled < length-reqd 
  [ report pack-zeros rescaled length-reqd true ]
  [ report rescaled ]  
end


to-report decrement [L]
  report but-last reduce [ [a b] -> lput (last a - b) a ] fput (list sum L) L
end

;; this is much quicker (also hella hard to understand)
to-report conditional-probabilities [frequencies]
  report (map [ [f s] -> ifelse-value (s > 0) [f / s] [0] ] frequencies decrement frequencies)
end

;; pack list out to length 0 with zeros
;; either post-pack or pre-pack depending on post
to-report pack-zeros [lst n post?]
  ifelse post? 
  [ report sublist (sentence lst n-values n [x -> 0]) 0 n ]
  [ report sublist (sentence n-values n [x -> 0] lst) 0 n ]
end
