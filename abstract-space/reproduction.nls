
;; The MIT License (MIT)
;;
;; Copyright (c) 2020 David O'Sullivan
;;
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to  permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included
;; in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
;; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

to-report get-next-generation
;  if lambda = 0 [
;    report (list 0 0 0)
;  ]
  ;; Going to assume THREE populations
  ;; only wild and GM reproduce
  let reproductive sum but-last pops
  ;; from which we get the new-population
  ;;
  ;; DO SOMETHING HERE??
  ;; should there be a mortality rate?
  
  let new-pop random-poisson (lambda-local * reproductive)
  
  ;; where lambda is effectively old-lambda - 1
  ;; (and perhaps should be redesignated r)
  ;;
  ;; let new-pop random-poisson (lambda * reproductive)
  
  ;; let new-pop reproductive + random-poisson (lambda * reproductive)
  ;; the proportions of these in each of wild, GM and sterile
  ;; determined by w^2, 2gw, g^2
  let pop-rel binom-expansion but-last pops
  report multinomial new-pop pop-rel true
end

;; report binomial coefficients [x_0^2 2x-0x_1 x_1^2]
;; from an input list [x0 x1]
to-report binom-expansion [x]
  let x0 item 0 x
  let x1 item 1 x
  report (list (x0 * x0) (2 * x0 * x1) (x1 * x1))
end


; This binomial algorithm from
; Devroye. L. 1960. Generating the maximum of independent identically
; distributed random variables. Computers and Mathematics with
; Applications 6, 305-315.
; should be a bit quicker because it only needs ~ np random-float calls
; Based on code from 
; https://stackoverflow.com/questions/23561551/a-efficient-binomial-random-number-generator-code-in-java#23574723
to-report binomial [n p]
  ; need to trap p = 0 and p = 1
  if p = 1 [ report n ]
  if p = 0 [ report 0 ]
  let ln-q ln (1 - p)
  let x 0
  let s 0
;  let i 0
  ; also need to avoid x = n
  while [x < n] [
;    set i i + 1
    set s s + ln (random-float 1) / (n - x)
    if s < ln-q [
;      show (list n x i) 
      report x
    ]
    set x x + 1
  ]
  report x
end

;; perform repeated binomial draws from population n
;; without replacement, with p based on ratios determined 
;; from the list of values in rel-nums
to-report multinomial [n frequencies rescale?]
  let conditional-freqs []
  ifelse rescale? 
  [ set conditional-freqs get-conditional-binom-probs frequencies ]
  [ set conditional-freqs frequencies ]
  ;; empty list for the results
  let result []
  ;; remember how many values we will need
  let num-values length conditional-freqs
  ;; keep going as long as we haven't drawn all n
  while [sum result < n] [
    ;; the next draw is based on the proportion of 
    ;; the remaining total represented by the first number
    ;; first time around this will be n0 / total
    ;; then it will be n1 / (total - n0), and so on
    let px first conditional-freqs
    ;; meanwhile the number remaining to be drawn is n - sum result, so...
    set result sentence result binomial (n - sum result) px
    set conditional-freqs but-first conditional-freqs
  ]
  ;; if the result is not the required length then pack it with zeros
  ifelse length result < num-values
  [ report pack-zeros result num-values]
  [ report result ]
end

to-report get-conditional-binom-probs [frequencies]
  let length-reqd length frequencies
  let rescaled []
  let f 0
  while [sum frequencies > 0] [
    set f first frequencies
    set rescaled lput (f / sum frequencies) rescaled
    set frequencies but-first frequencies
  ]
  ifelse length rescaled < length-reqd 
  [ report pack-zeros rescaled length-reqd ]
  [ report rescaled ]  
end


;; pack list out to length 0 with zeros
to-report pack-zeros [lst n]
  report sublist (sentence lst n-values n [x -> 0]) 0 n
end


to-report patch-at-offset [xy]
  report patch-at item 0 xy item 1 xy
end
