
;; The MIT License (MIT)
;;
;; Copyright (c) 2020 David O'Sullivan
;;
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to  permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included
;; in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
;; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

to setup
  clear-all
  reset-ticks

  if use-seed? [
    random-seed seed
  ]
  set central-p patch ((min-pxcor + max-pxcor) / 2) ((min-pycor + max-pycor) / 2)
  ;; setting up a dispersal kernel is slow so only do it if needed
  if use-kernel-method? [ setup-kernel ]

  ;; number of subpopulation is 3 in the wasp model
  set num-subpops 3
  ;; the corresponding brewer palettes (item 3 for total population)
  set pals ["OrRd" "PuBu" "BuGn" "BuPu"]

  ;; setup capacities and roads
  ;; in the full model these are read from ASCII raster data
  setup-capacities
  if LDD != "untargetted" [ setup-ldd-targets ]

  ;; setup frequently used subsets of the patches
  set the-land patches with [capacity >= 0]
  set the-habitable-land the-land with [capacity > 0]
  set the-sea patches with [capacity < 0]

  ;; initialise the patch population lists
  initialise-pops-to-zero

  ;; now the various possible initialisations
  if homogeneous? [ 
    ; This works by making all the patch capacities the same
    let mean-k mean [capacity] of the-habitable-land
    ask the-habitable-land [
      set capacity mean-k
    ]
    ;; could also set the sd-init-occ to zero
    ;; buit that's probably one for the model user
    ; set stdev-occupancy 0.0
  ]
  if member? "base" scenario [
    ; this will initialize to N(mean-occupancy, stdev-occupancy) * capacity in all
    ; the habitable patches. A proportion proportion-gm will be GM wasps
    setup-patch-populations
  ]
  if member? "release sites" scenario [
    ; this will lead to addition of wasps at a randomly selected range of locations
    ; number-of-sites selected at random from the percentile-selector best locations
    ; (defined by capacity). wasps-per-site will be added
    release-wasps true
  ]
  
  ;; initialise the monitoring area (not used in the abstract-space model
  setup-monitoring-area

  update-populations
  ask the-habitable-land [
    sprout-vizs 1 [
      set shape "circle"
    ]
  ]
  colour-patches
  ask the-sea [set pcolor cyan + 4]

  set show-contours? false
  renew-plots
  if debug? [ reset-timer ]
end


to setup-capacities
;; For the realistic GIS space:  
;  let ds gis:load-dataset "wasp-suitability.asc"
;  gis:apply-raster ds capacity  
  
  ;; abstract space is a high to low west to east (left to right!) gradient
  ;; with a little randomness
  if spatial-setup = "random-correlated" [
    ask patches [
      set capacity random-float 1
    ]
    repeat distribution-scale [
      diffuse capacity 0.5
    ]
    rescale-capacities
  ]
  if spatial-setup = "homogeneous" [ 
    ask patches [
      set capacity max-capacity-per-sq-km / 2
    ] 
  ]
  if spatial-setup = "e-w-trend" [
    ask patches [
      set capacity max-pxcor - pxcor
    ]
    rescale-capacities
  ]
end


to rescale-capacities 
  ;; scale it so the maximum capacity is the max requested
  let max-k max [capacity] of patches 
  let min-k min [capacity] of patches
  let mean-k mean [capacity] of patches
  let multiple max-capacity-per-sq-km / (max-k - min-k) 
  if debug? [ show multiple ]
  ask patches [
    ifelse (capacity >= 0)
    [ ifelse capacity > mean-k 
      [ set capacity floor (rescale capacity min-k max-k 1 max-capacity-per-sq-km) ]
      [ set capacity ceiling (rescale capacity min-k max-k 1 max-capacity-per-sq-km) ]
    ]
    [ set capacity -1 ]
  ]    
end

to-report rescale [x min-domain max-domain min-codomain max-codomain]
  let scale-factor (max-codomain - min-codomain) / (max-domain - min-domain)
  report min-codomain + (x - min-domain) * scale-factor
end

to setup-ldd-targets
;; Roads
;  set ds gis:load-dataset "roads-oblique.asc"
;  gis:apply-raster ds road?
  
  ;; abstract space just a couple of straight lines
  ask patches [
    ifelse LDD = "targetted-roads"
    [ set preferred-site? pxcor = 43 or pycor = 6 ]      
    [ set preferred-site? random-float 1 < (2 / world-width) ]
  ]
  set preferred-sites patches with [preferred-site?]
  ask preferred-sites [
    sprout-ldd-targets 1 [
      set color grey - 3
      set shape "x"
      set size 0.9
    ]
  ]
end


to setup-patch-populations
  let initial-rel-pops (list (1 - proportion-gm) 1 0)
  ask the-habitable-land [
    set next-pops multinomial-int int (capacity * random-normal mean-occupancy stdev-occupancy) initial-rel-pops false
    set init-pops next-pops
    set init-pop sum next-pops
  ]
end

;; PATCH function
to increment-population [subpop n]
  set next-pops replace-item subpop next-pops (item subpop next-pops + n)
end


;; releast GM wasps per the UI settings 
;; initialise? is true if this is during setup
;;                false if while model is running
to release-wasps [initialise?]
  ask n-of number-of-sites potential-release-sites [
    increment-population release-type colonies-per-site
    if initialise? [
      set init-pops next-pops
      set init-pop sum init-pops
    ]
  ]
end

;; get release sits from the specified upper percentil of capacities
to-report potential-release-sites 
  ifelse percentile-selector = 0 [
    report the-habitable-land
  ]
  [
    let n-percentile count the-habitable-land * (1 - percentile-selector)
    let cutoff-capacity [capacity] of item n-percentile (reverse sort-on [capacity] the-habitable-land)
    report the-habitable-land with [capacity >= cutoff-capacity]
  ]
end


to initialise-pops-to-zero
  ask the-land [
    set pops n-values num-subpops [ i -> 0 ]
    set next-pops n-values num-subpops [ i -> 0 ]
  ]
end


to setup-monitoring-area
  set monitoring-area patches
  if track-monitoring-area? [
    ask monitoring-area [
      set history []
    ]
  ]
end


to make-movie [n]
  vid:start-recorder
  setup
  vid:record-interface
  repeat n [
    go
    vid:record-interface
  ]
  vid:save-recording "foo.mp4"
end
