
;; The MIT License (MIT)
;;
;; Copyright (c) 2020 David O'Sullivan
;;
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to  permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included
;; in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
;; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

to setup
  ca
  reset-ticks

  if use-seed? [
    random-seed seed
  ]
  
  setup-kernel

  set num-pops 3
  set pals ["OrRd" "PuBu" "BuGn" "BuPu"]

  ask patches [
    set capacity max-pxcor - pxcor + random 2
  ]
  repeat 5 [
    diffuse capacity 0.5
  ]

  ask patches [
    ifelse (capacity >= 0)
    [ set capacity ceiling (capacity * 30) ]
    [ set capacity -1 ]
  ]
;;  set capacities sort remove-duplicates [capacity] of patches

;  set ds gis:load-dataset "roads-oblique.asc"
;  gis:apply-raster ds road?
  ask patches [
    set road? pxcor = 30 or pycor = 5
  ]
  set the-roads patches with [road?]
  ask the-roads [
    sprout-roads 1 [
      set color grey - 2
      set shape "square"
      set size 0.8
    ]
  ]

  set the-land patches with [capacity >= 0]
  set the-habitable-land the-land with [capacity > 0]
  set the-sea patches with [capacity < 0]
  set potential-release-sites patch-set nobody

;  set pop-history []
;  set wild-history []
;  set gm-history []

  initialise-pops-to-zero

  if homogenous? [ ;; member? "homogeneous" scenario [
    ; This works by making all the patch capacities the same
    let mean-k mean [capacity] of the-habitable-land
    ask the-habitable-land [
      set capacity mean-k
    ]
    ;; could also set the sd-init-occ to zero
    ;; buit that's probably one for the model user
    ; set init-sd-occ 0.0
  ]
  if member? "base" scenario [
    ; this will initialize to N(init-mean-occ, init-mean-occ) * capacity in all
    ; the habitable patches. A proportion base-prop-gm will be GM wasps
    setup-patch-populations
  ]
  if member? "release sites" scenario [
    ; this will lead to addition of wasps at a randomly selected range of locations
    ; number-of-sites selected at random from the percentile-selector best locations
    ; (defined by capacity). wasps-per-site will be added, with proportion of them
    ; GM given by prop-gm
    release-gm-wasps true
  ]
  setup-monitoring-area

  update-populations
  ask the-habitable-land [
    sprout-vizs 1 [
      set shape "circle"
    ]
  ]
  color-patches
  ask the-sea [set pcolor cyan + 4]

  ;; set distances array:from-list n-values 350 [i -> 0]
  renew-plots
end


to setup-patch-populations
  ask the-habitable-land [
    repeat int (capacity * random-normal init-mean-occ init-sd-occ) [
      let species ifelse-value (random-float 1 < base-prop-gm) [1] [0]
      set next-pops replace-item species next-pops (item species next-pops + 1)
    ]
    set init-pops next-pops
    set init-pop sum next-pops
  ]
end

to release-gm-wasps [initialise?]
  if initialise? [
    ifelse percentile-selector = 0 [
      set potential-release-sites the-habitable-land
    ]
    [
      let n-percentile count the-habitable-land * (1 - percentile-selector)
      let min-capacity [capacity] of last sublist (reverse sort-on [capacity] the-habitable-land) 0 n-percentile
      set potential-release-sites the-habitable-land with [capacity >= min-capacity]
    ]
  ]
  let release-sites n-of number-of-sites potential-release-sites
  ask release-sites [
    set next-pops replace-item release-type next-pops (item release-type next-pops + wasps-per-site)
  ]
  if initialise? [
    ask release-sites [
      set init-pops next-pops
      set init-pop sum init-pops
    ]
  ]
end

to initialise-pops-to-zero
  ask the-land [
    set pops n-values num-pops [ i -> 0 ]
    set next-pops n-values num-pops [ i -> 0 ]
  ]
end



to setup-monitoring-area
  set monitoring-area patch-set nobody
  if track-monitoring-area? [
    set monitoring-area the-land with [pxcor < 100 and pycor > 150 ]
;    set monitoring-area patches with [pxcor > 35 and pxcor < 61 and pycor > 170 and pycor < 196]
  ]
  ask monitoring-area [
    set history []
  ]
end


to make-movie [n]
  vid:start-recorder
  setup
  vid:record-interface
  repeat n [
    go
    vid:record-interface
  ]
  vid:save-recording "foo.mp4"
end
