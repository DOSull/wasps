to disperse 
  (foreach (get-next-generation r-loc pops) (n-values num-pops [i -> i]) [
    [new-cases idx] ->
    let target nobody
    repeat new-cases [ 
      ifelse random-float 1 < p-ldd [
        set target one-of roads
;        set target patch-at-heading-and-distance (random-float 360) (random-exponential lambda-2)
;        while [target = nobody] [ 
;          set target patch-at-heading-and-distance (random-float 360) (random-exponential lambda-2)
;        ]
      ]
      [
        set target patch-at-heading-and-distance (random-float 360) (random-exponential lambda-1)
        while [target = nobody] [ 
          set target patch-at-heading-and-distance (random-float 360) (random-exponential lambda-1)
        ]
      ]
      ask target [ 
        if capacity > 0 [
          set next-pops replace-item idx next-pops (item idx next-pops + 1)
          let i floor distance myself
          array:set distances i (array:item distances i) + 1 
        ]
      ]
    ]
  ])
end
